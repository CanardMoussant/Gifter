# This is the main configuration file for the application.
# ~~~~~

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
# If you deploy your application to several instances be sure to use the same key!
play.http.secret.key="changeme"

# Database configuration
# ~~~~~ 
# You can declare as many datasources as you want.
# By convention, the default datasource is named `default`
#
# db.default.user=sa
# db.default.password=""

slick.dbs.default.driver="slick.driver.PostgresDriver$"

slick.dbs.default.db.maxConnections=18
slick.dbs.default.db.driver="org.postgresql.Driver"
slick.dbs.default.db.url="jdbc:postgresql://localhost:5432/gifter3"
slick.dbs.default.user = "epot"


play.modules.enabled += "modules.BaseModule"
play.modules.enabled += "modules.JobModule"
play.modules.enabled += "modules.SilhouetteModule"
play.modules.enabled += "play.api.libs.mailer.MailerModule"

redis.uri = "redis://localhost:6379"

# https://stackoverflow.com/questions/45558233/getting-cors-errors-in-scala-play-framework-v2-6-x
play.filters.cors {
  #other cors configuration
  allowedHttpHeaders = ["Accept", "Content-Type"]
}

# Akka config
akka {
  loglevel = "INFO"
  jvm-exit-on-fatal-error=off

  # Auth token cleaner
  quartz.schedules.AuthTokenCleaner {
    expression = "0 0 */1 * * ?"
    timezone = "UTC"
    description = "cleanup the auth tokens on every hour"
  }
}


# Registers the filters
# ~~~~~
play.http.filters = "utils.Filters"

play.filters.disabled+=play.filters.csrf.CSRFFilter // TODO Configure security filters correctly before production use.
play.filters.headers.contentSecurityPolicy=null //disables CSP.

play.i18n.langs=["fr", "en"]

# Play mailer
play.mailer {
  host = "smtp.sendgrid.net"
  port = 587
  tls = true
  user = ""
  user = ${?SENDGRID_USERNAME}
  password = ""
  password = ${?SENDGRID_PASSWORD}
  mock=true
}

include "silhouette.conf"
